package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"gopkg.in/mgo.v2/bson"

	. "github.com/Jhamm1/OutboundCommunication/config"
	. "github.com/Jhamm1/OutboundCommunication/dao"
	. "github.com/Jhamm1/OutboundCommunication/models"
	"github.com/gorilla/mux"
	mailgun "github.com/mailgun/mailgun-go"
	"github.com/streadway/amqp"
	// docs is generated by Swag CLI, you have to import it.
)

var config = Config{}
var dao = CommunicationsDAO{}

var privateAPIKeyx
var yourDomainx

// GET list of communications
func AllCommunicationsEndPoint(w http.ResponseWriter, r *http.Request) {
	communications, err := dao.FindAll()
	if err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusOK, communications)
}

// GET a communication by its ID
func FindCommunicationEndpoint(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	communication, err := dao.FindById(params["id"])
	if err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid Communication ID")
		return
	}
	respondWithJson(w, http.StatusOK, communication)
}

func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
	}
}

// POST a new communication
func CreateCommunicationEndPoint(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()
	var communication Communication
	if err := json.NewDecoder(r.Body).Decode(&communication); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	communication.ID = bson.NewObjectId()
	if err := dao.Insert(communication); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusCreated, communication)

	///------------------------ Rabbit MQ -----------------------------------//
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"Outbound_communication_service", // name
		false, // durable
		false, // delete when unused
		false, // exclusive
		false, // no-wait
		nil,   // arguments
	)
	failOnError(err, "Failed to declare a queue")

	body := communication
	err = ch.Publish(
		"",     // exchange
		q.Name, // routing key
		false,  // mandatory
		false,  // immediate
		amqp.Publishing{
			ContentType: "text/plain",
			//Body:        []byte(body),
			Body: []byte(body.FirstName),
		})
	log.Printf(" [x] Sent %s", body)
	failOnError(err, "Failed to publish a message")

	//--------------------------------------------------------//
	config.Read()
	var yourDomain = config.mailgun_yourdomain
	var privateAPIKey = cong.mailgun_privateAPIKey
	
	SendEmail(yourDomain, privateAPIKey)
}

func SendEmail(yourDomainx, privateAPIKeyx) {

	// Create an instance of the Mailgun Client
	mg := mailgun.NewMailgun(yourDomainx, privateAPIKeyx)

	sender := "developer@micronox.co.uk"
	subject := "Fancy subject!"
	body := "Hello from Mailgun Go!"
	recipient := "julianhamm1@gmail.com"

	// The message object allows you to add attachments and Bcc recipients
	message := mg.NewMessage(sender, subject, body, recipient)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second*10)
	defer cancel()

	// Send the message    with a 10 second timeout
	resp, id, err := mg.Send(ctx, message)

	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("ID: %s Resp: %s\n", id, resp)
	fmt.Println("Hello, world.")
}

// PUT update an existing communication
func UpdateCommunicationEndPoint(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()
	var communication Communication
	if err := json.NewDecoder(r.Body).Decode(&communication); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	if err := dao.Update(communication); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusOK, map[string]string{"result": "success"})
}

// DELETE an existing communication
func DeleteCommunicationEndPoint(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()
	var communication Communication
	if err := json.NewDecoder(r.Body).Decode(&communication); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	if err := dao.Delete(communication); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusOK, map[string]string{"result": "success"})
}

func respondWithError(w http.ResponseWriter, code int, msg string) {
	respondWithJson(w, code, map[string]string{"error": msg})
}

func respondWithJson(w http.ResponseWriter, code int, payload interface{}) {
	response, _ := json.Marshal(payload)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	w.Write(response)
}

// Parse the configuration file 'config.toml', and establish a connection to DB
func init() {
	config.Read()

	dao.Server = config.Server
	dao.Database = config.Database
	dao.Connect()
}

// Define HTTP request routes
func main() {
	r := mux.NewRouter()
	r.HandleFunc("/communications", AllCommunicationsEndPoint).Methods("GET")
	r.HandleFunc("/communications", CreateCommunicationEndPoint).Methods("POST")
	r.HandleFunc("/communications", UpdateCommunicationEndPoint).Methods("PUT")
	r.HandleFunc("/communications", DeleteCommunicationEndPoint).Methods("DELETE")
	r.HandleFunc("/communications/{id}", FindCommunicationEndpoint).Methods("GET")
	if err := http.ListenAndServe(":3002", r); err != nil {
		log.Fatal(err)
	}
}
