package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	//. "github.com/Jhamm1/OutboundCommunication/controllers"
	. "github.com/Jhamm1/OutboundCommunication/db"
	. "github.com/Jhamm1/OutboundCommunication/models"
	"github.com/joho/godotenv"
	"github.com/streadway/amqp"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type AutoGenerated struct {
	Template     string       `json:"template"`
	Recipient    Recipient    `json:"recipient"`
	TemplateData TemplateData `json:"template_data"`
}

type TemplateData struct {
	FirstName string `json:"first_name"`
}

type Recipient struct {
	Address string `json:"address"`
}

var dao = CommunicationsDAO{}

func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
	}
}

// ToDo: add templated email id as a param in this function
//Add sender, subject, body and recipient and templateId as a param on this method
func SendMail(emailAddress string, customerName string) {

	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file", err)
	}

	var accessToken = os.Getenv("SWUS_ACCESS_TOKEN")
	log.Print("Test: ", accessToken)
	recipient := Recipient{Address: emailAddress}
	tempData := TemplateData{FirstName: customerName}
	auto := AutoGenerated{Template: "tem_md8KBh3qbmjw9dppKtpCjdY6", Recipient: recipient, TemplateData: tempData}
	byteArray, err := json.Marshal(auto)
	if err != nil {
		fmt.Println(err)
	}
	payload := strings.NewReader(string(byteArray))
	url := "https://api.sendwithus.com/api/v1/send"

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", accessToken)
	req.Header.Add("cache-control", "no-cache")
	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))
}

func SendingQueue(msg []byte) {
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"Outbound_communication_sending", // name
		false, // durable
		false, // delete when unused
		false, // exclusive
		false, // no-wait
		nil,   // arguments
	)
	failOnError(err, "Failed to declare a queue")

	body := msg
	err = ch.Publish(
		"",     // exchange
		q.Name, // routing key
		false,  // mandatory
		false,  // immediate
		amqp.Publishing{
			ContentType: "application/json",
			Body:        body,
		})
	log.Printf(" [x] Sent %s", body)
	failOnError(err, "Failed to publish a message")
}

//ToDO: Write function for consumingCommunicationOffQueue
func consumeOfftheQueue() {
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"Outbound_communication_service", // name
		false, // durable
		false, // delete when unused
		false, // exclusive
		false, // no-wait
		nil,   // arguments
	)
	failOnError(err, "Failed to declare a queue"+q.Name)

	msgs, err := ch.Consume(
		q.Name,    // queue
		"Sending", // consumer
		true,      // auto-ack
		false,     // exclusive
		false,     // no-local
		false,     // no-wait
		nil,       // args
	)
	failOnError(err, "Failed to register a consumer")

	forever := make(chan bool)

	go func() {
		for d := range msgs {
			log.Printf("Received a message: %s", d.Body)

			var comms Communication
			json.Unmarshal([]byte(d.Body), &comms)
			SendMail(string(comms.Email), string(comms.FirstName))
			SendingQueue(d.Body)

			//Update Outbound DB
			session, err := mgo.Dial("mongodb://localhost:27017")
			if err != nil {
				log.Fatal(err)
			}
			c := session.DB("outbound-communications_db").C("communications")
			selector := bson.M{"_id": comms.ID}
			updator := bson.M{"$set": bson.M{"status": "completedRequest"}}
			err = c.Update(selector, updator) //&communication.Email)
			if err := c.Update(selector, updator); err != nil {
				panic(err)
			}
			fmt.Printf("%+v\n", comms.ID)
		}

	}()

	log.Printf(" [*] Waiting for messages. To exit press CTRL+C")
	<-forever
}

func main() {
	consumeOfftheQueue()
}
