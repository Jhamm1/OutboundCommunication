package ccmServiceClient

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/joho/godotenv"
)

type AutoGenerated struct {
	Template     string       `json:"template"`
	Recipient    Recipient    `json:"recipient"`
	TemplateData TemplateData `json:"template_data"`
}

type TemplateData struct {
	FirstName string `json:"first_name"`
}

type Recipient struct {
	Address string `json:"address"`
}

//
type commTemplates struct {
	Sendwithus_contactus_template string
}

// ToDo: add templated email id as a param in this function
//Add sender, subject, body and recipient and templateId as a param on this method
func SendMail(emailAddress string, customerName string) {
	//func SendMail() {

	//Get email template
	f, error := os.Open("../communicationTemplates/templates.json")
	if error != nil {
		log.Fatal(error)
	}

	bb, error := ioutil.ReadAll(f)
	if error != nil {
		log.Fatal(error)
	}

	var templates commTemplates
	errT := json.Unmarshal(bb, &templates)
	if errT != nil {
		log.Println(errT)
	}

	//fmt.Println("This is a test", templates.Sendwithus_contactus_template)

	// Sending the communication
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file", err)
	}

	var accessToken = os.Getenv("SWUS_ACCESS_TOKEN")
	log.Print("Test: ", accessToken)
	recipient := Recipient{Address: emailAddress}
	tempData := TemplateData{FirstName: customerName}
	auto := AutoGenerated{Template: templates.Sendwithus_contactus_template, Recipient: recipient, TemplateData: tempData}
	byteArray, err := json.Marshal(auto)
	if err != nil {
		fmt.Println(err)
	}
	payload := strings.NewReader(string(byteArray))
	url := "https://api.sendwithus.com/api/v1/send"

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", accessToken)
	req.Header.Add("cache-control", "no-cache")
	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))
}
